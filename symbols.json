[
  {
    "name": "_ensureLimit",
    "kind": "function",
    "file": "src/component/widget/widgetStore.js",
    "description": "Ensure the store does not exceed its capacity. Older entries are evicted first.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "_evict",
    "kind": "function",
    "file": "src/component/widget/widgetStore.js",
    "description": "Remove a widget from the DOM and store if it exists. This is the sole method performing element.remove().",
    "params": [
      {
        "name": "id",
        "type": "string",
        "desc": ""
      }
    ],
    "returns": "void"
  },
  {
    "name": "add",
    "kind": "function",
    "file": "src/component/widget/widgetStore.js",
    "description": "Store a widget element using its `dataid` attribute as the key. Existing entries are refreshed.",
    "params": [
      {
        "name": "element",
        "type": "HTMLElement",
        "desc": ""
      }
    ],
    "returns": "void"
  },
  {
    "name": "addBoardToUI",
    "kind": "function",
    "file": "src/component/board/boardManagement.js",
    "description": "Insert a board option into the board selector element. Also selects the board stored in localStorage if available.",
    "params": [
      {
        "name": "board",
        "type": "{id: string, name: string}",
        "desc": "- Board information to display."
      }
    ],
    "returns": "void"
  },
  {
    "name": "addDragOverlay",
    "kind": "function",
    "file": "src/component/widget/events/dragDrop.js",
    "description": "Adds a transparent overlay to a widget to act as a drop target.",
    "params": [
      {
        "name": "widgetWrapper",
        "type": "HTMLElement",
        "desc": "- The widget to add an overlay to."
      }
    ],
    "returns": "void"
  },
  {
    "name": "addWidget",
    "kind": "function",
    "file": "src/component/widget/widgetManagement.js",
    "description": "Adds a new widget to the current view and persists the state.",
    "params": [
      {
        "name": "url",
        "type": "string",
        "desc": "- The URL of the service to embed."
      },
      {
        "name": "columns",
        "type": "number",
        "desc": "- The number of grid columns for the widget to span."
      },
      {
        "name": "rows",
        "type": "number",
        "desc": "- The number of grid rows for the widget to span."
      },
      {
        "name": "type",
        "type": "string",
        "desc": "- The type of the widget."
      },
      {
        "name": "boardId",
        "type": "string",
        "desc": "- The ID of the board to add the widget to."
      },
      {
        "name": "viewId",
        "type": "string",
        "desc": "- The ID of the view to add the widget to."
      },
      {
        "name": "dataid",
        "type": "string|null",
        "desc": "- An optional persistent identifier for the widget."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "adjustWidgetSize",
    "kind": "function",
    "file": "src/component/widget/menu/resizeMenu.js",
    "description": "Adjusts the widget size to a specific column and row span.",
    "params": [
      {
        "name": "widgetWrapper",
        "type": "HTMLElement",
        "desc": "- The widget to resize."
      },
      {
        "name": "columns",
        "type": "number",
        "desc": "- The target number of columns."
      },
      {
        "name": "rows",
        "type": "number",
        "desc": "- The target number of rows."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "applyControlVisibility",
    "kind": "function",
    "file": "src/component/menu/menu.js",
    "description": "Applies visibility settings to control groups based on global configuration.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "applyFragment",
    "kind": "function",
    "file": "src/component/modal/fragmentDecisionModal.js",
    "description": "Applies the configuration from the URL fragment, either by overwriting or merging.",
    "params": [
      {
        "name": "overwrite",
        "type": "boolean",
        "desc": "- If true, existing data will be replaced."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "applyWidgetMenuVisibility",
    "kind": "function",
    "file": "src/component/menu/dashboardMenu.js",
    "description": "Apply visibility of the widget menu based on configuration.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "base64UrlDecode",
    "kind": "function",
    "file": "src/utils/compression.js",
    "description": "Decode a base64url string to bytes.",
    "params": [
      {
        "name": "str",
        "type": "string",
        "desc": ""
      }
    ],
    "returns": "Uint8Array"
  },
  {
    "name": "base64UrlEncode",
    "kind": "function",
    "file": "src/utils/compression.js",
    "description": "Base64url encode a byte array.",
    "params": [
      {
        "name": "bytes",
        "type": "Uint8Array",
        "desc": ""
      }
    ],
    "returns": "string"
  },
  {
    "name": "boardGetUUID",
    "kind": "function",
    "file": "src/utils/id.js",
    "description": "Generate a unique board id.",
    "params": [],
    "returns": "string"
  },
  {
    "name": "checkLogStatus",
    "kind": "function",
    "file": "src/utils/Logger.js",
    "description": "Check whether logging is enabled for the current file. Uses localStorage key `log` which may contain `'all'` or comma-separated filenames.",
    "params": [],
    "returns": "boolean"
  },
  {
    "name": "clearConfigFragment",
    "kind": "function",
    "file": "src/utils/fragmentGuard.js",
    "description": "Remove any `#cfg` or `#svc` fragment from the current URL without triggering a reload.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "clearWidgetContainer",
    "kind": "function",
    "file": "src/component/board/boardManagement.js",
    "description": "Hides all widgets currently managed by the widgetStore. This is used to clear the view without removing elements from the DOM permanently.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "closeModal",
    "kind": "function",
    "file": "src/component/modal/modalFactory.js",
    "description": "Closes the modal, removes the backdrop and event listeners, and calls the close callback.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "configureWidget",
    "kind": "function",
    "file": "src/component/widget/widgetManagement.js",
    "description": "Prompts the user to enter a new URL for a widget's iframe.",
    "params": [
      {
        "name": "iframeElement",
        "type": "HTMLIFrameElement",
        "desc": "- The iframe element of the widget to configure."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "confirmCapacity",
    "kind": "function",
    "file": "src/component/widget/widgetStore.js",
    "description": "Ensure capacity before adding a widget. Prompts for eviction when full.",
    "params": [],
    "returns": "Promise<boolean>"
  },
  {
    "name": "createBoard",
    "kind": "function",
    "file": "src/component/board/boardManagement.js",
    "description": "Create a board with a default view. Updates DOM selectors and persists the state in localStorage.",
    "params": [
      {
        "name": "boardName",
        "type": "string",
        "desc": "- Display name for the board."
      },
      {
        "name": "boardId",
        "type": "?string",
        "desc": "- Existing board identifier, if any."
      },
      {
        "name": "viewId",
        "type": "?string",
        "desc": "- Identifier for the default view."
      }
    ],
    "returns": "Promise<Board>"
  },
  {
    "name": "createResizeOverlay",
    "kind": "function",
    "file": "src/component/widget/events/resizeHandler.js",
    "description": "Creates a full-screen overlay to capture mouse events during resizing.",
    "params": [],
    "returns": "HTMLDivElement"
  },
  {
    "name": "createView",
    "kind": "function",
    "file": "src/component/board/boardManagement.js",
    "description": "Add a new view to an existing board and make it active. The board state is persisted in localStorage and DOM selectors are updated.",
    "params": [
      {
        "name": "boardId",
        "type": "string",
        "desc": "- Identifier of the board to modify."
      },
      {
        "name": "viewName",
        "type": "string",
        "desc": "- Display name for the view."
      },
      {
        "name": "viewId",
        "type": "?string",
        "desc": "- Optional predefined id for the view."
      }
    ],
    "returns": "Promise<View|undefined>"
  },
  {
    "name": "createWidget",
    "kind": "function",
    "file": "src/component/widget/widgetManagement.js",
    "description": "Creates the DOM structure for a new widget, including its iframe and menu.",
    "params": [
      {
        "name": "service",
        "type": "string",
        "desc": "- The service identifier."
      },
      {
        "name": "url",
        "type": "string",
        "desc": "- The URL for the widget's iframe source."
      },
      {
        "name": "gridColumnSpan",
        "type": "number",
        "desc": "- The number of grid columns to span."
      },
      {
        "name": "gridRowSpan",
        "type": "number",
        "desc": "- The number of grid rows to span."
      },
      {
        "name": "dataid",
        "type": "string|null",
        "desc": "- An optional persistent identifier for the widget."
      }
    ],
    "returns": "Promise<HTMLDivElement>"
  },
  {
    "name": "debounce",
    "kind": "function",
    "file": "src/utils/utils.js",
    "description": "Create a debounced version of a function.",
    "params": [
      {
        "name": "func",
        "type": "Function",
        "desc": "- Function to debounce."
      },
      {
        "name": "wait",
        "type": "number",
        "desc": "- Delay in milliseconds."
      }
    ],
    "returns": "Function"
  },
  {
    "name": "debounceLeading",
    "kind": "function",
    "file": "src/utils/utils.js",
    "description": "Debounce function that executes immediately and ignores subsequent calls until the wait time has elapsed.",
    "params": [
      {
        "name": "func",
        "type": "Function",
        "desc": "- Function to debounce."
      },
      {
        "name": "wait",
        "type": "number",
        "desc": "- Delay in milliseconds."
      }
    ],
    "returns": "Function"
  },
  {
    "name": "decodeConfig",
    "kind": "function",
    "file": "src/utils/compression.js",
    "description": "Convenience wrapper for decoding dashboard configuration objects.",
    "params": [
      {
        "name": "str",
        "type": "string",
        "desc": ""
      }
    ],
    "returns": "Promise<object>"
  },
  {
    "name": "deleteBoard",
    "kind": "function",
    "file": "src/component/board/boardManagement.js",
    "description": "Remove a board from the application and update the UI. The remaining boards are saved back to localStorage.",
    "params": [
      {
        "name": "boardId",
        "type": "string",
        "desc": "- Identifier of the board to delete."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "deleteView",
    "kind": "function",
    "file": "src/component/board/boardManagement.js",
    "description": "Delete a view from a board, updating the DOM and stored state.",
    "params": [
      {
        "name": "boardId",
        "type": "string",
        "desc": "- Identifier of the board containing the view."
      },
      {
        "name": "viewId",
        "type": "string",
        "desc": "- Identifier of the view to remove."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "disableLogs",
    "kind": "function",
    "file": "src/utils/Logger.js",
    "description": "Disable all logging output.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "enableLogs",
    "kind": "function",
    "file": "src/utils/Logger.js",
    "description": "Persist a comma-separated list of files to log or 'all'.",
    "params": [
      {
        "name": "files",
        "type": "string",
        "desc": "- Files to enable logging for."
      }
    ],
    "returns": "void"
  },
  {
    "name": "encodeConfig",
    "kind": "function",
    "file": "src/utils/compression.js",
    "description": "Convenience wrapper for encoding dashboard configuration objects.",
    "params": [
      {
        "name": "cfg",
        "type": "object",
        "desc": ""
      }
    ],
    "returns": "Promise<string>"
  },
  {
    "name": "enlarge",
    "kind": "function",
    "file": "src/component/widget/menu/resizeMenu.js",
    "description": "Enlarges the widget both horizontally and vertically by one unit.",
    "params": [
      {
        "name": "widget",
        "type": "HTMLElement",
        "desc": "- The widget element to enlarge."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "error",
    "kind": "function",
    "file": "src/utils/Logger.js",
    "description": "Output error.",
    "params": [
      {
        "name": "args",
        "type": "...any",
        "desc": ""
      }
    ],
    "returns": ""
  },
  {
    "name": "fetchData",
    "kind": "function",
    "file": "src/component/widget/utils/fetchData.js",
    "description": "Fetch JSON data from a URL and pass it to a callback.",
    "params": [
      {
        "name": "url",
        "type": "string",
        "desc": "- Endpoint to request."
      },
      {
        "name": "callback",
        "type": "Function",
        "desc": "- Receives the parsed JSON."
      }
    ],
    "returns": "void"
  },
  {
    "name": "fetchJson",
    "kind": "function",
    "file": "src/component/widget/utils/fetchServices.js",
    "description": "Fetches and parses a JSON file from a URL.",
    "params": [
      {
        "name": "url",
        "type": "string",
        "desc": "- The URL to fetch the JSON from."
      }
    ],
    "returns": "Promise<object|null>"
  },
  {
    "name": "fetchJson",
    "kind": "function",
    "file": "src/utils/fetchServices.js",
    "description": "Fetches and parses a JSON file from a URL.",
    "params": [
      {
        "name": "url",
        "type": "string",
        "desc": "- The URL to fetch JSON from."
      }
    ],
    "returns": "Promise<object|null>"
  },
  {
    "name": "fetchJson",
    "kind": "function",
    "file": "src/utils/getConfig.js",
    "description": "Fetches and parses a JSON file from a URL.",
    "params": [
      {
        "name": "url",
        "type": "string",
        "desc": "- The URL to fetch JSON from."
      }
    ],
    "returns": "Promise<object|null>"
  },
  {
    "name": "fetchServices",
    "kind": "function",
    "file": "src/component/widget/utils/fetchServices.js",
    "description": "Retrieve the list of services from query params, localStorage or a default file.",
    "params": [],
    "returns": "Promise<Array>"
  },
  {
    "name": "fetchServices",
    "kind": "function",
    "file": "src/utils/fetchServices.js",
    "description": "Fetch the service list and update the service selector on the page.",
    "params": [],
    "returns": "Promise<Array<Service>>"
  },
  {
    "name": "findFirstWidgetByService",
    "kind": "function",
    "file": "src/component/widget/widgetStore.js",
    "description": "Find the first widget instance for a given service name.",
    "params": [
      {
        "name": "serviceName",
        "type": "string",
        "desc": ""
      }
    ],
    "returns": "HTMLElement|undefined"
  },
  {
    "name": "get",
    "kind": "function",
    "file": "src/component/widget/widgetStore.js",
    "description": "Retrieve a widget element and mark it as recently used.",
    "params": [
      {
        "name": "id",
        "type": "string",
        "desc": ""
      }
    ],
    "returns": "HTMLElement|undefined"
  },
  {
    "name": "getAuthToken",
    "kind": "function",
    "file": "src/component/widget/utils/fetchData.js",
    "description": "Retrieve the auth token for API requests.",
    "params": [],
    "returns": "string"
  },
  {
    "name": "getCallingFunctionName",
    "kind": "function",
    "file": "src/utils/Logger.js",
    "description": "Extracts the function name of the caller (if available) from the stack trace.",
    "params": [],
    "returns": "string"
  },
  {
    "name": "getConfig",
    "kind": "function",
    "file": "src/utils/getConfig.js",
    "description": "Load and cache the dashboard configuration from multiple sources.",
    "params": [],
    "returns": "Promise<Object>"
  },
  {
    "name": "getCurrentBoardId",
    "kind": "function",
    "file": "src/utils/elements.js",
    "description": "Get the id of the currently active board element.",
    "params": [],
    "returns": "string"
  },
  {
    "name": "getCurrentUrl",
    "kind": "function",
    "file": "src/utils/getCurrentUrl.js",
    "description": "Return the base URL combined with the first path segment.",
    "params": [],
    "returns": "string"
  },
  {
    "name": "getCurrentViewId",
    "kind": "function",
    "file": "src/utils/elements.js",
    "description": "Get the id of the currently active view element.",
    "params": [],
    "returns": "string"
  },
  {
    "name": "getLocalStorageData",
    "kind": "function",
    "file": "src/component/modal/localStorageModal.js",
    "description": "Retrieves and parses all JSON-formatted items from localStorage.",
    "params": [],
    "returns": "Record<string, any>"
  },
  {
    "name": "getSelectedBoardId",
    "kind": "function",
    "file": "src/component/board/boardDropdown.js",
    "description": "Get the board id currently selected in the dropdown.",
    "params": [],
    "returns": "string"
  },
  {
    "name": "getServiceFromUrl",
    "kind": "function",
    "file": "src/component/widget/utils/widgetUtils.js",
    "description": "Determine which service definition matches the provided URL.",
    "params": [
      {
        "name": "url",
        "type": "string",
        "desc": "- Widget URL."
      }
    ],
    "returns": "Promise<string>"
  },
  {
    "name": "getUUID",
    "kind": "function",
    "file": "src/utils/utils.js",
    "description": "Generate a UUID using the browser crypto API when available.",
    "params": [],
    "returns": "string"
  },
  {
    "name": "gunzipBase64urlToJson",
    "kind": "function",
    "file": "src/utils/compression.js",
    "description": "Decode and gunzip a base64url string to a JavaScript object.",
    "params": [
      {
        "name": "str",
        "type": "string",
        "desc": ""
      }
    ],
    "returns": "Promise<object>"
  },
  {
    "name": "gzipJsonToBase64url",
    "kind": "function",
    "file": "src/utils/compression.js",
    "description": "Gzip a JavaScript object and encode it as base64url.",
    "params": [
      {
        "name": "obj",
        "type": "object",
        "desc": ""
      }
    ],
    "returns": "Promise<string>"
  },
  {
    "name": "handleCreateBoard",
    "kind": "function",
    "file": "src/component/board/boardDropdown.js",
    "description": "Prompt the user for a board name and create it.",
    "params": [],
    "returns": "Promise<void>"
  },
  {
    "name": "handleCreateView",
    "kind": "function",
    "file": "src/component/view/viewDropdown.js",
    "description": "Create a new view on the active board.",
    "params": [],
    "returns": "Promise<void>"
  },
  {
    "name": "handleDeleteBoard",
    "kind": "function",
    "file": "src/component/board/boardDropdown.js",
    "description": "Delete the currently selected board after confirmation.",
    "params": [],
    "returns": "Promise<void>"
  },
  {
    "name": "handleDeleteView",
    "kind": "function",
    "file": "src/component/view/viewDropdown.js",
    "description": "Delete the active view after confirmation.",
    "params": [],
    "returns": "Promise<void>"
  },
  {
    "name": "handleDragEnd",
    "kind": "function",
    "file": "src/component/widget/events/dragDrop.js",
    "description": "Handles the end of a drag operation, cleaning up UI elements.",
    "params": [
      {
        "name": "e",
        "type": "DragEvent",
        "desc": "- The dragend event."
      }
    ],
    "returns": "void"
  },
  {
    "name": "handleDragLeave",
    "kind": "function",
    "file": "src/component/widget/events/dragDrop.js",
    "description": "Handles the dragleave event on a potential drop target.",
    "params": [
      {
        "name": "e",
        "type": "DragEvent",
        "desc": "- The dragleave event."
      },
      {
        "name": "widgetWrapper",
        "type": "HTMLElement",
        "desc": "- The widget that the cursor is leaving."
      }
    ],
    "returns": "void"
  },
  {
    "name": "handleDragOver",
    "kind": "function",
    "file": "src/component/widget/events/dragDrop.js",
    "description": "Handles the dragover event on a potential drop target.",
    "params": [
      {
        "name": "e",
        "type": "DragEvent",
        "desc": "- The dragover event."
      },
      {
        "name": "widgetWrapper",
        "type": "HTMLElement",
        "desc": "- The widget being hovered over."
      }
    ],
    "returns": "void"
  },
  {
    "name": "handleDragStart",
    "kind": "function",
    "file": "src/component/widget/events/dragDrop.js",
    "description": "Handles the start of a drag operation.",
    "params": [
      {
        "name": "e",
        "type": "DragEvent",
        "desc": "- The dragstart event."
      },
      {
        "name": "draggedWidgetWrapper",
        "type": "HTMLElement",
        "desc": "- The widget element being dragged."
      }
    ],
    "returns": "void"
  },
  {
    "name": "handleDrop",
    "kind": "function",
    "file": "src/component/widget/events/dragDrop.js",
    "description": "Handles the drop event on a target widget.",
    "params": [
      {
        "name": "e",
        "type": "DragEvent",
        "desc": "- The drop event."
      },
      {
        "name": "targetWidgetWrapper",
        "type": "HTMLElement",
        "desc": "- The widget being dropped on."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "handleEscape",
    "kind": "function",
    "file": "src/component/modal/modalFactory.js",
    "description": "Handles the 'Escape' key press to close the modal.",
    "params": [
      {
        "name": "e",
        "type": "KeyboardEvent",
        "desc": "- The keyboard event."
      }
    ],
    "returns": "void"
  },
  {
    "name": "handleEscapeKey",
    "kind": "function",
    "file": "src/component/widget/events/fullscreenToggle.js",
    "description": "Exit fullscreen when the user presses the Escape key.",
    "params": [
      {
        "name": "event",
        "type": "KeyboardEvent",
        "desc": "- Keydown event."
      }
    ],
    "returns": "void"
  },
  {
    "name": "handleRenameBoard",
    "kind": "function",
    "file": "src/component/board/boardDropdown.js",
    "description": "Prompt for a new name and rename the selected board.",
    "params": [],
    "returns": "Promise<void>"
  },
  {
    "name": "handleRenameView",
    "kind": "function",
    "file": "src/component/view/viewDropdown.js",
    "description": "Rename the currently selected view.",
    "params": [],
    "returns": "Promise<void>"
  },
  {
    "name": "handleResetView",
    "kind": "function",
    "file": "src/component/view/viewDropdown.js",
    "description": "Remove all widgets from the current view.",
    "params": [],
    "returns": "Promise<void>"
  },
  {
    "name": "handleResize",
    "kind": "function",
    "file": "src/component/widget/events/resizeHandler.js",
    "description": "Handles mouse movement during a resize operation, updating the widget's grid span.",
    "params": [
      {
        "name": "event",
        "type": "MouseEvent",
        "desc": "- The mousemove event."
      }
    ],
    "returns": "void"
  },
  {
    "name": "handleResizeStart",
    "kind": "function",
    "file": "src/component/widget/events/resizeHandler.js",
    "description": "Start tracking mouse movement for resizing a widget.",
    "params": [
      {
        "name": "event",
        "type": "MouseEvent",
        "desc": "- Mousedown event that initiated resize."
      },
      {
        "name": "widget",
        "type": "HTMLElement",
        "desc": "- The widget element being resized."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "has",
    "kind": "function",
    "file": "src/component/widget/widgetStore.js",
    "description": "Check if a widget exists in the store.",
    "params": [
      {
        "name": "id",
        "type": "string",
        "desc": ""
      }
    ],
    "returns": "boolean"
  },
  {
    "name": "hide",
    "kind": "function",
    "file": "src/component/widget/widgetStore.js",
    "description": "Hide a stored widget by id.",
    "params": [
      {
        "name": "id",
        "type": "string",
        "desc": ""
      }
    ],
    "returns": "void"
  },
  {
    "name": "hideResizeMenu",
    "kind": "function",
    "file": "src/component/widget/menu/resizeMenu.js",
    "description": "",
    "params": [
      {
        "name": "icon",
        "type": "HTMLElement",
        "desc": "- The icon element that triggered the event."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "hideResizeMenuBlock",
    "kind": "function",
    "file": "src/component/widget/menu/resizeMenu.js",
    "description": "Hides the resize menu block for a widget.",
    "params": [
      {
        "name": "widgetWrapper",
        "type": "HTMLElement",
        "desc": "- The widget to hide the menu from."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "info",
    "kind": "function",
    "file": "src/utils/Logger.js",
    "description": "Output info.",
    "params": [
      {
        "name": "args",
        "type": "...any",
        "desc": ""
      }
    ],
    "returns": ""
  },
  {
    "name": "initializeBoardDropdown",
    "kind": "function",
    "file": "src/component/board/boardDropdown.js",
    "description": "Attach dropdown actions for board management.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "initializeBoards",
    "kind": "function",
    "file": "src/component/board/boardManagement.js",
    "description": "Load boards from localStorage and populate the selectors. Creates a default board when none exist and returns the first board/view.",
    "params": [],
    "returns": "Promise<{boardId: string, viewId: string}|undefined>"
  },
  {
    "name": "initializeDashboardMenu",
    "kind": "function",
    "file": "src/component/menu/dashboardMenu.js",
    "description": "Set up event handlers for the dashboard menu and populate service options.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "initializeDragAndDrop",
    "kind": "function",
    "file": "src/component/widget/events/dragDrop.js",
    "description": "Initializes the drag and drop functionality. In this model, it's a placeholder as event listeners are attached dynamically during the drag operation.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "initializeDropdown",
    "kind": "function",
    "file": "src/component/utils/dropDownUtils.js",
    "description": "Attach click handlers to a dropdown based on data-action attributes.",
    "params": [
      {
        "name": "dropdownElement",
        "type": "HTMLElement",
        "desc": "- The dropdown container element."
      },
      {
        "name": "handlers",
        "type": "Object<string,Function>",
        "desc": "- Map of action names to callbacks."
      }
    ],
    "returns": "void"
  },
  {
    "name": "initializeMainMenu",
    "kind": "function",
    "file": "src/component/menu/menu.js",
    "description": "Create the main dashboard menu and insert it into the page.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "initializeResizeHandles",
    "kind": "function",
    "file": "src/component/widget/events/resizeHandler.js",
    "description": "Append resize handles to all widgets and register listeners.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "initializeViewDropdown",
    "kind": "function",
    "file": "src/component/view/viewDropdown.js",
    "description": "Set up the dropdown used for view management actions.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "initializeWidgetSelectorPanel",
    "kind": "function",
    "file": "src/component/menu/widgetSelectorPanel.js",
    "description": "Set up click handler for selecting services.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "initSW",
    "kind": "function",
    "file": "src/component/menu/menu.js",
    "description": "Initialize service worker controls in the menu.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "isAdding",
    "kind": "function",
    "file": "src/component/widget/widgetStore.js",
    "description": "Check if a service is currently being added.",
    "params": [
      {
        "name": "serviceName",
        "type": "string",
        "desc": ""
      }
    ],
    "returns": "boolean"
  },
  {
    "name": "isJSON",
    "kind": "function",
    "file": "src/component/modal/localStorageModal.js",
    "description": "Checks if a given string is valid JSON.",
    "params": [
      {
        "name": "value",
        "type": "string",
        "desc": "- The string to check."
      }
    ],
    "returns": "boolean"
  },
  {
    "name": "listLoggedFiles",
    "kind": "function",
    "file": "src/utils/Logger.js",
    "description": "Print the list of files currently logging to the console.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "load",
    "kind": "function",
    "file": "src/storage/servicesStore.js",
    "description": "Loads the array of services from localStorage.",
    "params": [],
    "returns": "Array<import('../types.js').Service>"
  },
  {
    "name": "loadBoardState",
    "kind": "function",
    "file": "src/storage/localStorage.js",
    "description": "Retrieves the array of boards from localStorage.",
    "params": [],
    "returns": "Promise<Array<import('../types.js').Board>>"
  },
  {
    "name": "loadFromFragment",
    "kind": "function",
    "file": "src/utils/fragmentLoader.js",
    "description": "Parse the URL fragment and store config/services in localStorage. Logs info on success and alerts on failure.",
    "params": [],
    "returns": "Promise<void>"
  },
  {
    "name": "loadFromSources",
    "kind": "function",
    "file": "src/utils/getConfig.js",
    "description": "Loads configuration from various sources in a specific order: URL params, localStorage, then a default file.",
    "params": [],
    "returns": "Promise<object|null>"
  },
  {
    "name": "loadInitialConfig",
    "kind": "function",
    "file": "src/storage/localStorage.js",
    "description": "Loads the initial board configuration from the global config object into localStorage. This is typically called on first run to seed the dashboard.",
    "params": [],
    "returns": "Promise<void>"
  },
  {
    "name": "lock",
    "kind": "function",
    "file": "src/component/widget/widgetStore.js",
    "description": "Acquire the lock for a service name.",
    "params": [
      {
        "name": "serviceName",
        "type": "string",
        "desc": ""
      }
    ],
    "returns": "void"
  },
  {
    "name": "log",
    "kind": "function",
    "file": "src/utils/Logger.js",
    "description": "Output standard log.",
    "params": [
      {
        "name": "args",
        "type": "...any",
        "desc": ""
      }
    ],
    "returns": ""
  },
  {
    "name": "Logger",
    "kind": "class",
    "file": "src/utils/Logger.js",
    "description": "A simple browser console logger with runtime enable/disable support.",
    "params": [],
    "returns": ""
  },
  {
    "name": "logMessage",
    "kind": "function",
    "file": "src/utils/Logger.js",
    "description": "Internal log writer, applies prefixes and optionally persists structured logs into window._appLogs during Playwright test runs.",
    "params": [
      {
        "name": "level",
        "type": "string",
        "desc": "- Console method to use ('log', 'warn', 'error', etc)"
      },
      {
        "name": "args",
        "type": "...any",
        "desc": "- Arguments to log"
      }
    ],
    "returns": ""
  },
  {
    "name": "mergeBoards",
    "kind": "function",
    "file": "src/utils/merge.js",
    "description": "Merge board arrays by id.",
    "params": [
      {
        "name": "existingBoards",
        "type": "Array<Board>",
        "desc": ""
      },
      {
        "name": "newBoards",
        "type": "Array<Board>",
        "desc": ""
      }
    ],
    "returns": "Array<Board>"
  },
  {
    "name": "mergeServices",
    "kind": "function",
    "file": "src/utils/merge.js",
    "description": "Merge service arrays by unique url or id.",
    "params": [
      {
        "name": "existingServices",
        "type": "Array<Service>",
        "desc": ""
      },
      {
        "name": "newServices",
        "type": "Array<Service>",
        "desc": ""
      }
    ],
    "returns": "Array<Service>"
  },
  {
    "name": "openConfigModal",
    "kind": "function",
    "file": "src/component/modal/configModal.js",
    "description": "Open a modal dialog allowing the user to edit and save configuration JSON.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "openEvictionModal",
    "kind": "function",
    "file": "src/component/modal/evictionModal.js",
    "description": "Display a modal to choose a widget for removal.",
    "params": [
      {
        "name": "widgets",
        "type": "Map<string, HTMLElement>",
        "desc": "- Current widget map."
      }
    ],
    "returns": "Promise<{id:string, title:string}|null>"
  },
  {
    "name": "openFragmentDecisionModal",
    "kind": "function",
    "file": "src/component/modal/fragmentDecisionModal.js",
    "description": "Display modal asking user to overwrite or merge fragment data.",
    "params": [
      {
        "name": "cfgParam",
        "type": "string|null",
        "desc": "- Encoded config fragment."
      },
      {
        "name": "svcParam",
        "type": "string|null",
        "desc": "- Encoded service fragment."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "openLocalStorageModal",
    "kind": "function",
    "file": "src/component/modal/localStorageModal.js",
    "description": "Display a modal to inspect and modify `localStorage` keys.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "openModal",
    "kind": "function",
    "file": "src/component/modal/modalFactory.js",
    "description": "Create and display a modal element.",
    "params": [
      {
        "name": "options",
        "type": "Object",
        "desc": "- Modal configuration options."
      },
      {
        "name": "options.id",
        "type": "string",
        "desc": "- Unique id for the modal."
      },
      {
        "name": "options.buildContent",
        "type": "Function",
        "desc": "- Callback that populates the modal body."
      },
      {
        "name": "options.onCloseCallback",
        "type": "Function",
        "desc": "- Called when the modal closes."
      },
      {
        "name": "options.showCloseIcon",
        "type": "boolean",
        "desc": "- Display an \"X\" close icon."
      }
    ],
    "returns": "void"
  },
  {
    "name": "openSaveServiceModal",
    "kind": "function",
    "file": "src/component/modal/saveServiceModal.js",
    "description": "Open a modal allowing the user to name and store a service URL.",
    "params": [
      {
        "name": "url",
        "type": "string",
        "desc": "- The service URL to save."
      },
      {
        "name": "onClose",
        "type": "Function",
        "desc": "- Callback when the modal closes."
      }
    ],
    "returns": "void"
  },
  {
    "name": "parseBase64",
    "kind": "function",
    "file": "src/component/widget/utils/fetchServices.js",
    "description": "Parses a base64 encoded JSON string.",
    "params": [
      {
        "name": "data",
        "type": "string",
        "desc": "- The base64 encoded string."
      }
    ],
    "returns": "object|null"
  },
  {
    "name": "parseBase64",
    "kind": "function",
    "file": "src/utils/fetchServices.js",
    "description": "Parses a base64 encoded JSON string.",
    "params": [
      {
        "name": "data",
        "type": "string",
        "desc": "- The base64 encoded string."
      }
    ],
    "returns": "object|null"
  },
  {
    "name": "parseBase64",
    "kind": "function",
    "file": "src/utils/getConfig.js",
    "description": "Parses a base64 encoded JSON string.",
    "params": [
      {
        "name": "data",
        "type": "string",
        "desc": "- The base64 encoded string."
      }
    ],
    "returns": "object|null"
  },
  {
    "name": "populateServiceDropdown",
    "kind": "function",
    "file": "src/component/menu/dashboardMenu.js",
    "description": "Populate the service drop-down with saved services.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "populateWidgetSelectorPanel",
    "kind": "function",
    "file": "src/component/menu/widgetSelectorPanel.js",
    "description": "Populate dropdown list with saved services.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "registerServiceWorker",
    "kind": "function",
    "file": "src/component/menu/menu.js",
    "description": "Registers the service worker script.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "removeDragOverlay",
    "kind": "function",
    "file": "src/component/widget/events/dragDrop.js",
    "description": "Removes the drag overlay from a widget.",
    "params": [
      {
        "name": "widgetWrapper",
        "type": "HTMLElement",
        "desc": "- The widget to remove the overlay from."
      }
    ],
    "returns": "void"
  },
  {
    "name": "removeWidget",
    "kind": "function",
    "file": "src/component/widget/widgetManagement.js",
    "description": "Removes a widget from the view and updates the layout.",
    "params": [
      {
        "name": "widgetElement",
        "type": "HTMLElement",
        "desc": "- The widget wrapper element to remove."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "renameBoard",
    "kind": "function",
    "file": "src/component/board/boardManagement.js",
    "description": "Rename an existing board and persist the change.",
    "params": [
      {
        "name": "boardId",
        "type": "string",
        "desc": "- Identifier of the board to rename."
      },
      {
        "name": "newBoardName",
        "type": "string",
        "desc": "- New name displayed to the user."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "renameView",
    "kind": "function",
    "file": "src/component/board/boardManagement.js",
    "description": "Rename a view within a board and persist the update.",
    "params": [
      {
        "name": "boardId",
        "type": "string",
        "desc": "- Board containing the view."
      },
      {
        "name": "viewId",
        "type": "string",
        "desc": "- Identifier of the view to rename."
      },
      {
        "name": "newViewName",
        "type": "string",
        "desc": "- The new display name."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "requestRemoval",
    "kind": "function",
    "file": "src/component/widget/widgetStore.js",
    "description": "Request removal of a widget from the DOM and store.",
    "params": [
      {
        "name": "id",
        "type": "string",
        "desc": ""
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "resetView",
    "kind": "function",
    "file": "src/component/board/boardManagement.js",
    "description": "Clear all widgets from a view and persist the empty state.",
    "params": [
      {
        "name": "boardId",
        "type": "string",
        "desc": "- Identifier of the board containing the view."
      },
      {
        "name": "viewId",
        "type": "string",
        "desc": "- Identifier of the view to reset."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "resizeHorizontally",
    "kind": "function",
    "file": "src/component/widget/menu/resizeMenu.js",
    "description": "Resizes the widget horizontally by adjusting its grid column span.",
    "params": [
      {
        "name": "widget",
        "type": "HTMLElement",
        "desc": "- The widget element to resize."
      },
      {
        "name": "increase",
        "type": "boolean",
        "desc": "- Whether to increase or decrease the size."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "resizeVertically",
    "kind": "function",
    "file": "src/component/widget/menu/resizeMenu.js",
    "description": "Resizes the widget vertically by adjusting its grid row span.",
    "params": [
      {
        "name": "widget",
        "type": "HTMLElement",
        "desc": "- The widget element to resize."
      },
      {
        "name": "increase",
        "type": "boolean",
        "desc": "- Whether to increase or decrease the size."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "save",
    "kind": "function",
    "file": "src/storage/servicesStore.js",
    "description": "Saves the array of services to localStorage.",
    "params": [
      {
        "name": "services",
        "type": "Array<import('../types.js').Service>",
        "desc": "- The array of services to save."
      }
    ],
    "returns": "void"
  },
  {
    "name": "saveBoardState",
    "kind": "function",
    "file": "src/storage/localStorage.js",
    "description": "Persists the entire array of board objects to localStorage.",
    "params": [
      {
        "name": "boards",
        "type": "Array<import('../types.js').Board>",
        "desc": "- The array of boards to save."
      }
    ],
    "returns": "void"
  },
  {
    "name": "saveLocalStorageData",
    "kind": "function",
    "file": "src/component/modal/localStorageModal.js",
    "description": "Saves a data object to localStorage, serializing each value to a JSON string.",
    "params": [
      {
        "name": "updatedData",
        "type": "Record<string, any>",
        "desc": "- The data to save."
      }
    ],
    "returns": "void"
  },
  {
    "name": "saveWidgetState",
    "kind": "function",
    "file": "src/storage/localStorage.js",
    "description": "Serializes the state of all visible widgets and saves it to localStorage.",
    "params": [
      {
        "name": "boardId",
        "type": "string",
        "desc": "- The ID of the current board."
      },
      {
        "name": "viewId",
        "type": "string",
        "desc": "- The ID of the current view."
      }
    ],
    "returns": "void"
  },
  {
    "name": "serializeWidgetState",
    "kind": "function",
    "file": "src/storage/localStorage.js",
    "description": "Converts a widget DOM element into a serializable state object.",
    "params": [
      {
        "name": "widget",
        "type": "HTMLElement",
        "desc": "- The widget element."
      }
    ],
    "returns": "import('../types.js').Widget"
  },
  {
    "name": "show",
    "kind": "function",
    "file": "src/component/widget/widgetStore.js",
    "description": "Show a stored widget by id.",
    "params": [
      {
        "name": "id",
        "type": "string",
        "desc": ""
      }
    ],
    "returns": "void"
  },
  {
    "name": "showNotification",
    "kind": "function",
    "file": "src/component/dialog/notification.js",
    "description": "Display a temporary notification message.",
    "params": [
      {
        "name": "message",
        "type": "string",
        "desc": "- Text content of the notification."
      },
      {
        "name": "duration",
        "type": "number",
        "desc": "- How long to display the notification."
      },
      {
        "name": "type",
        "type": "('success'|'error')",
        "desc": "- Visual style of the message."
      }
    ],
    "returns": "void"
  },
  {
    "name": "showResizeMenu",
    "kind": "function",
    "file": "src/component/widget/menu/resizeMenu.js",
    "description": "Shows the resize menu with directional arrows for a widget.",
    "params": [
      {
        "name": "icon",
        "type": "HTMLElement",
        "desc": "- The icon element that triggered the event."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "showResizeMenuBlock",
    "kind": "function",
    "file": "src/component/widget/menu/resizeMenu.js",
    "description": "Shows a menu block with explicit size options (e.g., \"2 columns, 3 rows\").",
    "params": [
      {
        "name": "icon",
        "type": "HTMLElement",
        "desc": "- The icon element that triggered the event."
      },
      {
        "name": "widgetWrapper",
        "type": "HTMLElement",
        "desc": "- The widget to show the menu for."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "showServiceModal",
    "kind": "function",
    "file": "src/component/modal/serviceLaunchModal.js",
    "description": "Open a modal that loads a service URL in an iframe to perform an action. After completion the widget iframe is refreshed.",
    "params": [
      {
        "name": "serviceObj",
        "type": "{url: string}",
        "desc": "- Service information with a URL."
      },
      {
        "name": "widgetWrapper",
        "type": "HTMLElement",
        "desc": "- Widget element to refresh."
      }
    ],
    "returns": "void"
  },
  {
    "name": "shrink",
    "kind": "function",
    "file": "src/component/widget/menu/resizeMenu.js",
    "description": "Shrinks the widget both horizontally and vertically by one unit.",
    "params": [
      {
        "name": "widget",
        "type": "HTMLElement",
        "desc": "- The widget element to shrink."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "stopResize",
    "kind": "function",
    "file": "src/component/widget/events/resizeHandler.js",
    "description": "Handles the end of a resize operation, cleaning up listeners and saving state.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "switchBoard",
    "kind": "function",
    "file": "src/component/board/boardManagement.js",
    "description": "Switch the current board and optionally a specific view. Updates DOM identifiers and remembers the selection in localStorage.",
    "params": [
      {
        "name": "boardId",
        "type": "string",
        "desc": "- Identifier of the board to activate."
      },
      {
        "name": "viewId",
        "type": "?string",
        "desc": "- Specific view id to load, defaults to first view."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "switchView",
    "kind": "function",
    "file": "src/component/board/boardManagement.js",
    "description": "Switch the currently active view within a board. Clears and repopulates the widget container and updates localStorage.",
    "params": [
      {
        "name": "boardId",
        "type": "string",
        "desc": "- Identifier of the board containing the view."
      },
      {
        "name": "viewId",
        "type": "string",
        "desc": "- Identifier of the view to activate."
      }
    ],
    "returns": "Promise<void>"
  },
  {
    "name": "toggleFullScreen",
    "kind": "function",
    "file": "src/component/widget/events/fullscreenToggle.js",
    "description": "Toggle the given widget element between fullscreen and normal size.",
    "params": [
      {
        "name": "widget",
        "type": "HTMLElement",
        "desc": "- The widget wrapper to modify."
      }
    ],
    "returns": "void"
  },
  {
    "name": "unlock",
    "kind": "function",
    "file": "src/component/widget/widgetStore.js",
    "description": "Release the lock for a service name.",
    "params": [
      {
        "name": "serviceName",
        "type": "string",
        "desc": ""
      }
    ],
    "returns": "void"
  },
  {
    "name": "unregisterServiceWorker",
    "kind": "function",
    "file": "src/component/menu/menu.js",
    "description": "Unregisters all active service workers and clears their caches.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "updateBoardSelector",
    "kind": "function",
    "file": "src/component/board/boardManagement.js",
    "description": "Rebuilds the board selector dropdown from the in-memory `boards` array.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "updateServiceWorkerUI",
    "kind": "function",
    "file": "src/component/menu/menu.js",
    "description": "Updates the UI of the service worker toggle icon and attributes.",
    "params": [
      {
        "name": "isEnabled",
        "type": "boolean",
        "desc": "- True if the service worker should be shown as enabled."
      }
    ],
    "returns": "void"
  },
  {
    "name": "updateViewSelector",
    "kind": "function",
    "file": "src/component/board/boardManagement.js",
    "description": "Populate the view selector dropdown for a given board. Reads the last used view from localStorage to preselect it.",
    "params": [
      {
        "name": "boardId",
        "type": "string",
        "desc": "- Identifier of the board whose views will be shown."
      }
    ],
    "returns": "void"
  },
  {
    "name": "updateWidgetCounter",
    "kind": "function",
    "file": "src/component/menu/widgetSelectorPanel.js",
    "description": "Update the Active/Max counter in the panel.",
    "params": [],
    "returns": "void"
  },
  {
    "name": "viewGetUUID",
    "kind": "function",
    "file": "src/utils/id.js",
    "description": "Generate a unique view id.",
    "params": [],
    "returns": "string"
  },
  {
    "name": "warn",
    "kind": "function",
    "file": "src/utils/Logger.js",
    "description": "Output warning.",
    "params": [
      {
        "name": "args",
        "type": "...any",
        "desc": ""
      }
    ],
    "returns": ""
  },
  {
    "name": "widgetGetUUID",
    "kind": "function",
    "file": "src/utils/id.js",
    "description": "Generate a unique widget id.",
    "params": [],
    "returns": "string"
  },
  {
    "name": "WidgetStore",
    "kind": "class",
    "file": "src/component/widget/widgetStore.js",
    "description": "Lightweight LRU cache storing widget elements by id. Evicts least recently used widgets when capacity is exceeded.",
    "params": [],
    "returns": ""
  }
]